Index: app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) 2021 xuexiangjys(xuexiangjys@163.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage com.yiflyplan.app.fragment;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Entity;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Environment;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.Toast;\n\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.toolbox.Volley;\nimport com.xuexiang.xaop.annotation.SingleClick;\nimport com.xuexiang.xpage.annotation.Page;\nimport com.xuexiang.xqrcode.XQRCode;\nimport com.xuexiang.xqrcode.util.QRCodeAnalyzeUtils;\nimport com.xuexiang.xui.utils.KeyboardUtils;\nimport com.xuexiang.xui.widget.actionbar.TitleBar;\nimport com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet;\nimport com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet.BottomListSheetBuilder;\nimport com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;\nimport com.xuexiang.xui.widget.imageview.RadiusImageView;\nimport com.xuexiang.xui.widget.imageview.strategy.impl.GlideImageLoadStrategy;\nimport com.xuexiang.xutil.display.ImageUtils;\nimport com.xuexiang.xutil.file.FileUtils;\nimport com.yiflyplan.app.R;\nimport com.yiflyplan.app.adapter.VO.CurrentUserVO;\nimport com.yiflyplan.app.core.BaseFragment;\nimport com.yiflyplan.app.core.http.MultipartRequest;\nimport com.yiflyplan.app.core.http.MyHttp;\nimport com.yiflyplan.app.core.http.entity.MultipartEntity;\nimport com.yiflyplan.app.utils.MD5Util;\nimport com.yiflyplan.app.utils.ReflectUtil;\nimport com.yiflyplan.app.utils.XToastUtils;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.util.LinkedHashMap;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\nimport androidx.core.content.FileProvider;\nimport butterknife.BindView;\nimport butterknife.OnClick;\n\nimport static android.app.Activity.RESULT_OK;\nimport static com.yiflyplan.app.fragment.LoginFragment.stringtoBitmap;\nimport static com.yiflyplan.app.utils.TextUtil.disallowSpacesUtil;\n\n@Page(name = \"注册\")\npublic class RegisteredFragment  extends BaseFragment {\n\n\n    @BindView(R.id.iv_avatar)\n    ImageView ivAvatar;\n    @BindView(R.id.et_phone_number)\n    MaterialEditText etPhoneNumber;\n    @BindView(R.id.et_password_number)\n    MaterialEditText etPasswordNumber;\n    @BindView(R.id.et_confirm_password_number)\n    MaterialEditText etConfirmPasswordNumber;\n    @BindView(R.id.et_user_name)\n    MaterialEditText etUserName;\n    @BindView(R.id.et_verify_code)\n    MaterialEditText etVerifyCode;\n    @BindView(R.id.code_image)\n    ImageView codeImage;\n\n    private String savedVerificationCode;\n    private Bitmap verificationCodeImage;\n    private Uri mImageUri;\n    private File file;\n\n\n    public static final int TITLE_SIZE = 50;\n    public static final int TITLE_BAR_HEIGHT = 120;\n    private static final int REQUEST_IMAGE_GET = 0;\n    private static final int REQUEST_IMAGE_CAPTURE = 1;\n    private static final int REQUEST_BIG_IMAGE_CUTTING = 3;\n    private static final String IMAGE_FILE_NAME = \"icon.jpg\";\n\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.fragment_registered;\n    }\n\n    @Override\n    protected void initViews() {\n        getVerifyCode();\n        disallowSpacesUtil(etUserName);\n    }\n\n    @Override\n    protected TitleBar initTitle() {\n        TitleBar titleBar = super.initTitle();\n        titleBar.setTitleSize(TITLE_SIZE);\n        titleBar.setHeight(TITLE_BAR_HEIGHT);\n        return titleBar;\n    }\n\n    @SuppressLint(\"NonConstantResourceId\")\n    @SingleClick\n    @OnClick({R.id.btn_register, R.id.iv_avatar,R.id.et_verify_code, R.id.code_image})\n    public void onViewClicked(View view) {\n        switch (view.getId()) {\n            case R.id.code_image:\n                getVerifyCode();\n                break;\n            case R.id.btn_register:\n                if (mImageUri!=null){\n                    if (etPhoneNumber.validate()) {\n                        if(etUserName.isEmpty()){\n                            XToastUtils.toast(\"用户名不能为空\");\n                        }else if(etUserName.validate()) {\n                            if(etPasswordNumber.validate()){\n                                if(etConfirmPasswordNumber.getText().toString().equals(etPasswordNumber.getText().toString())){\n                                    if (etVerifyCode.validate()) {\n                                        RequestQueue queue = Volley.newRequestQueue(getContext());\n\n                                        MultipartRequest multipartRequest = new MultipartRequest(\n                                                \"http://118.190.97.125:8080/user/register\", new Response.Listener<String>() {\n\n                                            @Override\n                                            public void onResponse(String response) {\n                                                Log.e(\"\", \"### response : \" + response);\n                                            }\n\n                                        });\n\n                                        // 添加header\n//                                        multipartRequest.addHeader(\"Charset\", \"UTF-8\");\n//                                        multipartRequest.addHeader(\"Content-Type\", \"multipart/form-data\");\n//                                        multipartRequest.addHeader(\"Accept-Encoding\", \"gzip,deflate\");\n//                                        multipartRequest.addHeader(\"Authorization\", \"\");\n\n                                        // 通过MultipartEntity来设置参数\n                                        MultipartEntity multi = multipartRequest.getMultiPartEntity();\n\n                                        // 文本参数\n                                        multi.addStringPart(\"password\", etPasswordNumber.getText().toString());\n                                        multi.addStringPart(\"passwordAgain\", etConfirmPasswordNumber.getText().toString());\n                                        multi.addStringPart(\"tel\", String.valueOf(etPhoneNumber.getText()));\n                                        multi.addStringPart(\"userName\",String.valueOf(etUserName.getText()));\n                                        multi.addStringPart(\"verificationCode\", String.valueOf(etVerifyCode.getText()));\n                                        // 上传文件\n                                        multi.addFilePart(\"userAvatar\", file);\n\n                                        Log.d(\"rrr\", String.valueOf(multi.getContent()));\n                                        // 将请求添加到队列中\n                                        queue.add(multipartRequest);\n\n\n\n//\n//                                        LinkedHashMap<String, String> params = new LinkedHashMap<>();\n//                                        params.put(\"tel\", String.valueOf(etPhoneNumber.getText()));\n//                                        params.put(\"password\", etPasswordNumber.getText().toString());\n//                                        params.put(\"passwordAgain\", etConfirmPasswordNumber.getText().toString());\n//                                        params.put(\"userName\", String.valueOf(etUserName.getText()));\n//                                        params.put(\"verificationCode\", String.valueOf(etVerifyCode.getText()));\n//\n//\n//\n//                                        LinkedHashMap<String, MultipartEntity> params1 = new LinkedHashMap<>();\n//                                        MultipartEntity multipartEntity = new MultipartEntity();\n//                                        multipartEntity.addFilePart(\"images\", new File(file.getPath()));\n//                                        params1.put(\"userAvatar\", multipartEntity);\n//\n//                                        MyHttp.postForm(\"/user/register\", \"\", params, new MyHttp.Callback() {\n//                                            @Override\n//                                            public void success(JSONObject data) throws JSONException {\n//                                                XToastUtils.toast(\"注册成功\");\n//                                                openNewPage(LoginFragment.class);\n//                                            }\n//\n//                                            @Override\n//                                            public void fail(JSONObject error) throws JSONException {\n//                                                if (error.getInt(\"code\") == 40004) {\n//                                                    getVerifyCode();\n//                                                }\n//                                            }\n//                                        });\n                                    }\n                                }else{\n                                    XToastUtils.toast(\"重复密码与原密码不匹配\");\n                                }\n                            }\n                        }\n                    }\n                }else {\n                    XToastUtils.toast(\"请更改头像\");\n                }\n\n                break;\n            case R.id.et_verify_code:\n                KeyboardUtils.isSoftInputShow(getActivity());\n                KeyboardUtils.showSoftInputForce(getActivity());\n                break;\n            case R.id.iv_avatar:\n                showBottomSheetList(ivAvatar);\n                break;\n            default:\n                break;\n        }\n    }\n\n\n    /**\n     * 弹窗\n     * @param v\n     */\n    private void showBottomSheetList(View v) {\n           new BottomListSheetBuilder(getActivity())\n                .addItem(\"拍照\")\n                .addItem(\"从相册选择\")\n                .setOnSheetItemClickListener((dialog, itemView, position, tag) -> {\n                    dialog.dismiss();\n                    switch (position) {\n                        case 0:\n                            // 拍照及文件权限申请\n                            if (ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED\n                                    || ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                                    != PackageManager.PERMISSION_GRANTED) {\n                                // 权限还没有授予，需要在这里写申请权限的代码\n                                ActivityCompat.requestPermissions(getActivity(),\n                                        new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 300);\n                            } else {\n                                // 权限已经申请，直接拍照\n                                dialog.dismiss();\n                                imageCapture();\n                            }\n\n                            break;\n                        case 1:\n                            // 文件权限申请\n                            if (ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                                //权限还没有授予，需要在这里写申请权限的代码\n                                ActivityCompat.requestPermissions(getActivity(),\n                                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 200);\n                            } else {\n                                // 如果权限已经申请过，直接进行图片选择\n                                dialog.dismiss();\n                                Intent intent = new Intent(Intent.ACTION_PICK);\n                                intent.setType(\"image/*\");\n                                // 判断系统中是否有处理该 Intent 的 Activity\n                                if (intent.resolveActivity(getActivity().getPackageManager()) != null) {\n                                    startActivityForResult(intent, REQUEST_IMAGE_GET);\n                                }\n                                else {\n                                    Toast.makeText(getActivity(), \"未找到图片查看器\", Toast.LENGTH_SHORT).show();\n                                }\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .build()\n                .show();\n    }\n\n\n\n\n    /**\n     * 处理回调结果\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        // 回调成功\n        if (resultCode == RESULT_OK) {\n            switch (requestCode) {\n                // 大图切割\n                case REQUEST_BIG_IMAGE_CUTTING:\n                    RadiusImageView radiusImageView = findViewById(R.id.iv_avatar);\n                    GlideImageLoadStrategy lodeImg = new GlideImageLoadStrategy();\n                    lodeImg.loadImage(radiusImageView,mImageUri);\n                    break;\n                // 相册选取\n                case REQUEST_IMAGE_GET:\n                    try {\n                        startBigPhotoZoom(data.getData());\n                    } catch (NullPointerException e) {\n                        e.printStackTrace();\n                    }\n                    break;\n                // 拍照\n                case REQUEST_IMAGE_CAPTURE:\n                    File temp = new File(Environment.getExternalStorageDirectory() + \"/\" + IMAGE_FILE_NAME);\n                    startBigPhotoZoom(temp);\n            }\n        }\n    }\n\n\n\n    /**\n     * 处理权限回调结果\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case 200:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    Intent intent = new Intent(Intent.ACTION_PICK);\n                    intent.setType(\"image/*\");\n                    // 判断系统中是否有处理该 Intent 的 Activity\n                    if (intent.resolveActivity(getActivity().getPackageManager()) != null) {\n                        startActivityForResult(intent, REQUEST_IMAGE_GET);\n                    } else {\n                        XToastUtils.toast(\"未找到图片查看器\");\n                    }\n                } else {\n                }\n                break;\n            case 300:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    imageCapture();\n                } else {\n                }\n                break;\n        }\n    }\n\n\n    /**\n     * 判断系统及拍照\n     */\n    private void imageCapture(){\n        Intent intent;\n        Uri pictureUri;\n        File pictureFile = new File(Environment.getExternalStorageDirectory(), IMAGE_FILE_NAME);\n        // 判断当前系统\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            pictureUri = FileProvider.getUriForFile(getContext(),\n                    \"com.yiflyplan.app.fileProvider\", pictureFile);\n        } else {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            pictureUri = Uri.fromFile(pictureFile);\n        }\n        // 去拍照\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);\n        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE);\n    }\n\n\n    /**\n     * 大图模式切割图片\n     * 直接创建一个文件将切割后的图片写入\n     */\n    public void startBigPhotoZoom(File inputFile) {\n        // 创建大图文件夹\n        Uri imageUri = null;\n        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            String storage = Environment.getExternalStorageDirectory().getPath();\n            File dirFile = new File(storage + \"/gzIcon\");\n            if (!dirFile.exists()) {\n                if (!dirFile.mkdirs()) {\n                    Log.e(\"TAG\", \"文件夹创建失败\");\n                } else {\n                    Log.e(\"TAG\", \"文件夹创建成功\");\n                }\n            }\n            file = new File(dirFile, System.currentTimeMillis() + \".jpg\");\n            imageUri = Uri.fromFile(file);\n            mImageUri = imageUri; // 将 uri 传出，方便设置到视图中\n        }\n\n        // 开始切割\n        Intent intent = new Intent(\"com.android.camera.action.CROP\");\n        intent.setDataAndType(getImageContentUri(getContext(), inputFile), \"image/*\");\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.putExtra(\"crop\", \"true\");\n        intent.putExtra(\"aspectX\", 1); // 裁剪框比例\n        intent.putExtra(\"aspectY\", 1);\n        intent.putExtra(\"outputX\", 600); // 输出图片大小\n        intent.putExtra(\"outputY\", 600);\n        intent.putExtra(\"scale\", true);\n        intent.putExtra(\"return-data\", false); // 不直接返回数据\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); // 返回一个文件\n        intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString());\n        startActivityForResult(intent, REQUEST_BIG_IMAGE_CUTTING);\n    }\n\n\n\n\n    public void startBigPhotoZoom(Uri uri) {\n        // 创建大图文件夹\n        Uri imageUri = null;\n        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            String storage = Environment.getExternalStorageDirectory().getPath();\n            File dirFile = new File(storage + \"/gzIcon\");\n            if (!dirFile.exists()) {\n                if (!dirFile.mkdirs()) {\n                    Log.e(\"TAG\", \"文件夹创建失败\");\n                } else {\n                    Log.e(\"TAG\", \"文件夹创建成功\");\n                }\n            }\n            file = new File(dirFile, System.currentTimeMillis() + \".jpg\");\n            imageUri = Uri.fromFile(file);\n            mImageUri = imageUri; // 将 uri 传出，方便设置到视图中\n        }\n\n        // 开始切割\n        Intent intent = new Intent(\"com.android.camera.action.CROP\");\n        intent.setDataAndType(uri, \"image/*\");\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.putExtra(\"crop\", \"true\");\n        intent.putExtra(\"aspectX\", 1); // 裁剪框比例\n        intent.putExtra(\"aspectY\", 1);\n        intent.putExtra(\"outputX\", 600); // 输出图片大小\n        intent.putExtra(\"outputY\", 600);\n        intent.putExtra(\"scale\", true);\n        intent.putExtra(\"return-data\", false); // 不直接返回数据\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); // 返回一个文件\n        intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString());\n        startActivityForResult(intent, REQUEST_BIG_IMAGE_CUTTING);\n    }\n\n    public Uri getImageContentUri(Context context, File imageFile) {\n        String filePath = imageFile.getAbsolutePath();\n        Cursor cursor = context.getContentResolver().query(\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                new String[] { MediaStore.Images.Media._ID },\n                MediaStore.Images.Media.DATA + \"=? \",\n                new String[] { filePath }, null);\n\n        if (cursor != null && cursor.moveToFirst()) {\n            int id = cursor.getInt(cursor\n                    .getColumnIndex(MediaStore.MediaColumns._ID));\n            Uri baseUri = Uri.parse(\"content://media/external/images/media\");\n            return Uri.withAppendedPath(baseUri, \"\" + id);\n        } else {\n            if (imageFile.exists()) {\n                ContentValues values = new ContentValues();\n                values.put(MediaStore.Images.Media.DATA, filePath);\n                return context.getContentResolver().insert(\n                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);\n            } else {\n                return null;\n            }\n        }\n    }\n\n\n\n    /**\n     * 获取验证码\n     */\n    private void getVerifyCode() {\n\n        LinkedHashMap<String, String> params = new LinkedHashMap<>();\n        params.put(\"type\", \"0\");\n        MyHttp.get(\"/captcha/getRegisteredVerificationCode\", \"\", params, new MyHttp.Callback() {\n            @Override\n            public void success(JSONObject data) throws JSONException {\n                savedVerificationCode = data.toString();\n                verificationCodeImage = stringtoBitmap(savedVerificationCode);\n                codeImage.setImageBitmap(verificationCodeImage);\n            }\n            @Override\n            public void fail(JSONObject error) {\n                codeImage.setImageResource(R.drawable.ic_img);\n                Log.e(\"TAG:\", error.toString());\n\n            }\n        });\n\n    }\n\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java	(revision d3b69f4b33d19023f6155a8001b386cfc0e2be13)
+++ app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java	(date 1619947426000)
@@ -81,6 +81,7 @@
 
 import static android.app.Activity.RESULT_OK;
 import static com.yiflyplan.app.fragment.LoginFragment.stringtoBitmap;
+import static com.yiflyplan.app.utils.ImageConversionUtil.BitmapToByteArray;
 import static com.yiflyplan.app.utils.TextUtil.disallowSpacesUtil;
 
 @Page(name = "注册")
@@ -164,11 +165,11 @@
 
                                         });
 
-                                        // 添加header
-//                                        multipartRequest.addHeader("Charset", "UTF-8");
-//                                        multipartRequest.addHeader("Content-Type", "multipart/form-data");
-//                                        multipartRequest.addHeader("Accept-Encoding", "gzip,deflate");
-//                                        multipartRequest.addHeader("Authorization", "");
+//                                         添加header
+                                        multipartRequest.addHeader("Charset", "UTF-8");
+                                        multipartRequest.addHeader("Content-Type", "multipart/form-data");
+                                        multipartRequest.addHeader("Accept-Encoding", "gzip,deflate");
+                                        multipartRequest.addHeader("Authorization", "");
 
                                         // 通过MultipartEntity来设置参数
                                         MultipartEntity multi = multipartRequest.getMultiPartEntity();
@@ -179,10 +180,12 @@
                                         multi.addStringPart("tel", String.valueOf(etPhoneNumber.getText()));
                                         multi.addStringPart("userName",String.valueOf(etUserName.getText()));
                                         multi.addStringPart("verificationCode", String.valueOf(etVerifyCode.getText()));
+
                                         // 上传文件
                                         multi.addFilePart("userAvatar", file);
 
-                                        Log.d("rrr", String.valueOf(multi.getContent()));
+
+
                                         // 将请求添加到队列中
                                         queue.add(multipartRequest);
 
Index: app/src/main/java/com/yiflyplan/app/core/http/entity/MultipartEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) 2021 xuexiangjys(xuexiangjys@163.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage com.yiflyplan.app.core.http.entity;\n\nimport android.text.TextUtils;\n\nimport org.apache.http.Header;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.message.BasicHeader;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.Closeable;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Random;\n\npublic class MultipartEntity implements HttpEntity {\n\n    private final static char[] MULTIPART_CHARS = \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            .toCharArray();\n    /**\n     * 换行符\n     */\n    private final String NEW_LINE_STR = \"\\r\\n\";\n    private final String CONTENT_TYPE = \"Content-Type: \";\n    private final String CONTENT_DISPOSITION = \"Content-Disposition: \";\n    /**\n     * 文本参数和字符集\n     */\n    private final String TYPE_TEXT_CHARSET = \"text/plain; charset=UTF-8\";\n\n    /**\n     * 字节流参数\n     */\n    private final String TYPE_OCTET_STREAM = \"application/octet-stream\";\n    /**\n     * 二进制参数\n     */\n    private final byte[] BINARY_ENCODING = \"Content-Transfer-Encoding: binary\\r\\n\\r\\n\".getBytes();\n    /**\n     * 文本参数\n     */\n    private final byte[] BIT_ENCODING = \"Content-Transfer-Encoding: 8bit\\r\\n\\r\\n\".getBytes();\n\n    /**\n     * 分隔符\n     */\n    private String mBoundary = null;\n    /**\n     * 输出流\n     */\n    ByteArrayOutputStream mOutputStream = new ByteArrayOutputStream();\n\n    public MultipartEntity() {\n        this.mBoundary = generateBoundary();\n    }\n\n    /**\n     * 生成分隔符\n     *\n     * @return\n     */\n    private final String generateBoundary() {\n        final StringBuffer buf = new StringBuffer();\n        final Random rand = new Random();\n        for (int i = 0; i < 30; i++) {\n            buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);\n        }\n        return buf.toString();\n    }\n\n    /**\n     * 参数开头的分隔符\n     *\n     * @throws IOException\n     */\n    private void writeFirstBoundary() throws IOException {\n        mOutputStream.write((\"--\" + mBoundary + \"\\r\\n\").getBytes());\n    }\n\n    /**\n     * 添加文本参数\n     *\n     * @param value\n     */\n    public void addStringPart(final String paramName, final String value) {\n        writeToOutputStream(paramName, value.getBytes(), TYPE_TEXT_CHARSET, BIT_ENCODING, \"\");\n    }\n\n    /**\n     * 将数据写入到输出流中\n     *\n     * @param rawData\n     * @param type\n     * @param encodingBytes\n     * @param fileName\n     */\n    private void writeToOutputStream(String paramName, byte[] rawData, String type,\n                                     byte[] encodingBytes,\n                                     String fileName) {\n        try {\n            writeFirstBoundary();\n            mOutputStream.write((CONTENT_TYPE + type + NEW_LINE_STR).getBytes());\n            mOutputStream\n                    .write(getContentDispositionBytes(paramName, fileName));\n            mOutputStream.write(encodingBytes);\n            mOutputStream.write(rawData);\n            mOutputStream.write(NEW_LINE_STR.getBytes());\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 添加二进制参数, 例如Bitmap的字节流参数\n     *\n     * @param rawData\n     */\n    public void addBinaryPart(String paramName, final byte[] rawData) {\n        writeToOutputStream(paramName, rawData, TYPE_OCTET_STREAM, BINARY_ENCODING, \"no-file\");\n    }\n\n    /**\n     * 添加文件参数,可以实现文件上传功能\n     *\n     * @param key\n     * @param file\n     */\n    public void addFilePart(final String key, final File file) {\n        InputStream fin = null;\n        try {\n            fin = new FileInputStream(file);\n            writeFirstBoundary();\n            final String type = CONTENT_TYPE + TYPE_OCTET_STREAM + NEW_LINE_STR;\n            mOutputStream.write(getContentDispositionBytes(key, file.getName()));\n            mOutputStream.write(type.getBytes());\n            mOutputStream.write(BINARY_ENCODING);\n\n            final byte[] tmp = new byte[4096];\n            int len = 0;\n            while ((len = fin.read(tmp)) != -1) {\n                mOutputStream.write(tmp, 0, len);\n            }\n            mOutputStream.flush();\n        } catch (final IOException e) {\n            e.printStackTrace();\n        } finally {\n            closeSilently(fin);\n        }\n    }\n\n    private void closeSilently(Closeable closeable) {\n        try {\n            if (closeable != null) {\n                closeable.close();\n            }\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    private byte[] getContentDispositionBytes(String paramName, String fileName) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(CONTENT_DISPOSITION + \"form-data; name=\\\"\" + paramName + \"\\\"\");\n        // 文本参数没有filename参数,设置为空即可\n        if (!TextUtils.isEmpty(fileName)) {\n            stringBuilder.append(\"; filename=\\\"\"\n                    + fileName + \"\\\"\");\n        }\n\n        return stringBuilder.append(NEW_LINE_STR).toString().getBytes();\n    }\n\n    @Override\n    public long getContentLength() {\n        return mOutputStream.toByteArray().length;\n    }\n\n    @Override\n    public Header getContentType() {\n        return new BasicHeader(\"Content-Type\", \"multipart/form-data; boundary=\" + mBoundary);\n    }\n\n    @Override\n    public boolean isChunked() {\n        return false;\n    }\n\n    @Override\n    public boolean isRepeatable() {\n        return false;\n    }\n\n    @Override\n    public boolean isStreaming() {\n        return false;\n    }\n\n    @Override\n    public void writeTo(final OutputStream outstream) throws IOException {\n        // 参数最末尾的结束符\n        final String endString = \"--\" + mBoundary + \"--\\r\\n\";\n        // 写入结束符\n        mOutputStream.write(endString.getBytes());\n        //\n        outstream.write(mOutputStream.toByteArray());\n    }\n\n    @Override\n    public Header getContentEncoding() {\n        return null;\n    }\n\n    @Override\n    public void consumeContent() throws IOException,\n            UnsupportedOperationException {\n        if (isStreaming()) {\n            throw new UnsupportedOperationException(\n                    \"Streaming entity does not implement #consumeContent()\");\n        }\n    }\n\n    @Override\n    public InputStream getContent() {\n        return new ByteArrayInputStream(mOutputStream.toByteArray());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/yiflyplan/app/core/http/entity/MultipartEntity.java	(revision d3b69f4b33d19023f6155a8001b386cfc0e2be13)
+++ app/src/main/java/com/yiflyplan/app/core/http/entity/MultipartEntity.java	(date 1619949690000)
@@ -53,6 +53,10 @@
      */
     private final String TYPE_OCTET_STREAM = "application/octet-stream";
     /**
+     * 图片参数
+     */
+    private final String TYPE_IMAGE_CHARSET = "image/jpg";
+    /**
      * 二进制参数
      */
     private final byte[] BINARY_ENCODING = "Content-Transfer-Encoding: binary\r\n\r\n".getBytes();
@@ -119,10 +123,10 @@
                                      String fileName) {
         try {
             writeFirstBoundary();
-            mOutputStream.write((CONTENT_TYPE + type + NEW_LINE_STR).getBytes());
+//            mOutputStream.write((CONTENT_TYPE + type + NEW_LINE_STR).getBytes());
             mOutputStream
                     .write(getContentDispositionBytes(paramName, fileName));
-            mOutputStream.write(encodingBytes);
+//            mOutputStream.write(encodingBytes);
             mOutputStream.write(rawData);
             mOutputStream.write(NEW_LINE_STR.getBytes());
         } catch (final IOException e) {
@@ -150,10 +154,10 @@
         try {
             fin = new FileInputStream(file);
             writeFirstBoundary();
-            final String type = CONTENT_TYPE + TYPE_OCTET_STREAM + NEW_LINE_STR;
+            final String type = CONTENT_TYPE + TYPE_IMAGE_CHARSET + NEW_LINE_STR;
             mOutputStream.write(getContentDispositionBytes(key, file.getName()));
             mOutputStream.write(type.getBytes());
-            mOutputStream.write(BINARY_ENCODING);
+//            mOutputStream.write(BINARY_ENCODING);
 
             final byte[] tmp = new byte[4096];
             int len = 0;
Index: app/src/main/java/com/yiflyplan/app/core/http/FormRequest.java
===================================================================
--- app/src/main/java/com/yiflyplan/app/core/http/FormRequest.java	(revision d3b69f4b33d19023f6155a8001b386cfc0e2be13)
+++ app/src/main/java/com/yiflyplan/app/core/http/FormRequest.java	(revision d3b69f4b33d19023f6155a8001b386cfc0e2be13)
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2021 xuexiangjys(xuexiangjys@163.com)
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- */
-
-package com.yiflyplan.app.core.http;
-
-import android.util.Log;
-
-import com.android.volley.AuthFailureError;
-import com.android.volley.DefaultRetryPolicy;
-import com.android.volley.NetworkResponse;
-import com.android.volley.ParseError;
-import com.android.volley.Request;
-import com.android.volley.Response;
-import com.android.volley.VolleyError;
-import com.android.volley.toolbox.HttpHeaderParser;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectOutputStream;
-import java.io.UnsupportedEncodingException;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-public class FormRequest extends Request<String> {
-    private final Response.ErrorListener errorListener;
-    private static final String BOUNDARY = "--------------520-13-14"; //数据分隔线
-    private static final String MULTIPART_FORM_DATA = "multipart/form-data";
-    private final List<FormField> fieldList;
-    private final String token;
-
-    public FormRequest(int method, String url, Response.ErrorListener listener, List<FormField> fieldList, String token) {
-        super(method, url, listener);
-        this.errorListener = listener;
-        this.fieldList = fieldList;
-        this.token = token;
-        setShouldCache(false);
-        //设置请求的响应事件，因为文件上传需要较长的时间，所以在这里加大了，设为5秒
-        setRetryPolicy(new DefaultRetryPolicy(5000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
-
-    }
-
-    @Override
-    protected Response<String> parseNetworkResponse(NetworkResponse networkResponse) {
-        try {
-            String parseResult =
-                    new String(networkResponse.data, HttpHeaderParser.parseCharset(networkResponse.headers));
-            Log.v("FromRequest", "====parseResult===" + parseResult);
-            return Response.success(parseResult,
-                    HttpHeaderParser.parseCacheHeaders(networkResponse));
-        } catch (UnsupportedEncodingException e) {
-            return Response.error(new ParseError(e));
-        }
-    }
-
-    @Override
-    protected void deliverResponse(String s) {
-        errorListener.onErrorResponse(new VolleyError(s));
-    }
-
-    @Override
-    public byte[] getBody() throws AuthFailureError {
-        if (fieldList == null || fieldList.size() == 0) {
-            return super.getBody();
-        }
-        ByteArrayOutputStream byteArrayOutputStream = null;
-        try {
-            byteArrayOutputStream = new ByteArrayOutputStream();
-            for (FormField formField : fieldList) {
-                StringBuilder fieldBuilder = new StringBuilder();
-                fieldBuilder.append("--" + BOUNDARY);
-                fieldBuilder.append("\r\n");
-                /*第二行*/
-                //Content-Disposition: form-data; name="参数的名称"; filename="上传的文件名" + "\r\n"
-                fieldBuilder.append("Content-Disposition: form-data;");
-                fieldBuilder.append(" name=\"").append(formField.getFieldName()).append("\";");
-                if (formField.getExtras() != null && formField.getExtras().length > 0) {
-                    FormField.Pair[] extras = formField.getExtras();
-                    for (FormField.Pair extra : extras) {
-                        fieldBuilder.append(extra.getKey()).append("\"").append(extra.getValue()).append("\"");
-                    }
-                }
-                if (formField.getContentType() != null) {
-                    fieldBuilder.append("\r\n").append("Content-Type: ").append(formField.getContentType()).append("\r\n");
-                }
-
-                fieldBuilder.append("\r\n");
-                ObjectOutputStream objectOutputStream = null;
-                try {
-                    byteArrayOutputStream.write(fieldBuilder.toString().getBytes("utf-8"));
-                    objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
-                    objectOutputStream.writeObject(formField.getFieldValue());
-                    objectOutputStream.flush();
-                } catch (Exception e) {
-                    e.printStackTrace();
-                } finally {
-                    try {
-                        if (objectOutputStream != null) {
-                            objectOutputStream.close();
-                        }
-                    } catch (IOException e) {
-                        e.printStackTrace();
-                    }
-                }
-            }
-            String endLine = "--" + BOUNDARY + "--" + "\r\n";
-            byteArrayOutputStream.write(endLine.getBytes("utf-8"));
-            return byteArrayOutputStream.toByteArray();
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            if (byteArrayOutputStream != null) {
-                try {
-                    byteArrayOutputStream.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-        throw new AuthFailureError("form转换失败");
-    }
-
-    @Override
-    public String getBodyContentType() {
-        return MULTIPART_FORM_DATA + "; boundary=" + BOUNDARY;
-    }
-
-    @Override
-    public Map<String, String> getHeaders() {
-        LinkedHashMap<String, String> headers = new LinkedHashMap<>();
-        headers.put("Authorization", token);
-        return headers;
-    }
-}
