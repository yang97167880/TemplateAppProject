Index: app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) 2021 xuexiangjys(xuexiangjys@163.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage com.yiflyplan.app.fragment;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Entity;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Environment;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.Toast;\n\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.toolbox.Volley;\nimport com.xuexiang.xaop.annotation.SingleClick;\nimport com.xuexiang.xpage.annotation.Page;\nimport com.xuexiang.xqrcode.XQRCode;\nimport com.xuexiang.xqrcode.util.QRCodeAnalyzeUtils;\nimport com.xuexiang.xui.utils.KeyboardUtils;\nimport com.xuexiang.xui.widget.actionbar.TitleBar;\nimport com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet;\nimport com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet.BottomListSheetBuilder;\nimport com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;\nimport com.xuexiang.xui.widget.imageview.RadiusImageView;\nimport com.xuexiang.xui.widget.imageview.strategy.impl.GlideImageLoadStrategy;\nimport com.xuexiang.xutil.display.ImageUtils;\nimport com.xuexiang.xutil.file.FileUtils;\nimport com.yiflyplan.app.R;\nimport com.yiflyplan.app.adapter.VO.CurrentUserVO;\nimport com.yiflyplan.app.core.BaseFragment;\nimport com.yiflyplan.app.core.http.MultipartRequest;\nimport com.yiflyplan.app.core.http.MyHttp;\nimport com.yiflyplan.app.core.http.entity.MultipartEntity;\nimport com.yiflyplan.app.utils.MD5Util;\nimport com.yiflyplan.app.utils.ReflectUtil;\nimport com.yiflyplan.app.utils.XToastUtils;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.File;\nimport java.util.LinkedHashMap;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\nimport androidx.core.content.FileProvider;\nimport butterknife.BindView;\nimport butterknife.OnClick;\n\nimport static android.app.Activity.RESULT_OK;\nimport static com.yiflyplan.app.fragment.LoginFragment.stringtoBitmap;\nimport static com.yiflyplan.app.utils.TextUtil.disallowSpacesUtil;\n\n@Page(name = \"注册\")\npublic class RegisteredFragment  extends BaseFragment {\n\n\n    @BindView(R.id.iv_avatar)\n    ImageView ivAvatar;\n    @BindView(R.id.et_phone_number)\n    MaterialEditText etPhoneNumber;\n    @BindView(R.id.et_password_number)\n    MaterialEditText etPasswordNumber;\n    @BindView(R.id.et_confirm_password_number)\n    MaterialEditText etConfirmPasswordNumber;\n    @BindView(R.id.et_user_name)\n    MaterialEditText etUserName;\n    @BindView(R.id.et_verify_code)\n    MaterialEditText etVerifyCode;\n    @BindView(R.id.code_image)\n    ImageView codeImage;\n\n    private String savedVerificationCode;\n    private Bitmap verificationCodeImage;\n    private Uri mImageUri;\n    private File file;\n\n\n    public static final int TITLE_SIZE = 50;\n    public static final int TITLE_BAR_HEIGHT = 120;\n    private static final int REQUEST_IMAGE_GET = 0;\n    private static final int REQUEST_IMAGE_CAPTURE = 1;\n    private static final int REQUEST_BIG_IMAGE_CUTTING = 3;\n    private static final String IMAGE_FILE_NAME = \"icon.jpg\";\n\n\n    @Override\n    protected int getLayoutId() {\n        return R.layout.fragment_registered;\n    }\n\n    @Override\n    protected void initViews() {\n        getVerifyCode();\n        disallowSpacesUtil(etUserName);\n    }\n\n    @Override\n    protected TitleBar initTitle() {\n        TitleBar titleBar = super.initTitle();\n        titleBar.setTitleSize(TITLE_SIZE);\n        titleBar.setHeight(TITLE_BAR_HEIGHT);\n        return titleBar;\n    }\n\n    @SuppressLint(\"NonConstantResourceId\")\n    @SingleClick\n    @OnClick({R.id.btn_register, R.id.iv_avatar,R.id.et_verify_code, R.id.code_image})\n    public void onViewClicked(View view) {\n        switch (view.getId()) {\n            case R.id.code_image:\n                getVerifyCode();\n                break;\n            case R.id.btn_register:\n                if (mImageUri!=null){\n                    if (etPhoneNumber.validate()) {\n                        if(etUserName.isEmpty()){\n                            XToastUtils.toast(\"用户名不能为空\");\n                        }else if(etUserName.validate()) {\n                            if(etPasswordNumber.validate()){\n                                if(etConfirmPasswordNumber.getText().toString().equals(etPasswordNumber.getText().toString())){\n                                    if (etVerifyCode.validate()) {\n                                        RequestQueue queue = Volley.newRequestQueue(getContext());\n\n                                        MultipartRequest multipartRequest = new MultipartRequest(\n                                                \"http://118.190.97.125:8080/user/register\", new Response.Listener<String>() {\n\n                                            @Override\n                                            public void onResponse(String response) {\n                                                Log.e(\"\", \"### response : \" + response);\n                                            }\n\n                                        });\n\n                                        // 添加header\n//                                        multipartRequest.addHeader(\"Charset\", \"UTF-8\");\n//                                        multipartRequest.addHeader(\"Content-Type\", \"multipart/form-data\");\n//                                        multipartRequest.addHeader(\"Accept-Encoding\", \"gzip,deflate\");\n//                                        multipartRequest.addHeader(\"Authorization\", \"\");\n\n                                        // 通过MultipartEntity来设置参数\n                                        MultipartEntity multi = multipartRequest.getMultiPartEntity();\n\n                                        // 文本参数\n                                        multi.addStringPart(\"password\", etPasswordNumber.getText().toString());\n                                        multi.addStringPart(\"passwordAgain\", etConfirmPasswordNumber.getText().toString());\n                                        multi.addStringPart(\"tel\", String.valueOf(etPhoneNumber.getText()));\n                                        multi.addStringPart(\"userName\",String.valueOf(etUserName.getText()));\n                                        multi.addStringPart(\"verificationCode\", String.valueOf(etVerifyCode.getText()));\n                                        // 上传文件\n                                        multi.addFilePart(\"userAvatar\", file);\n\n                                        Log.d(\"rrr\", String.valueOf(multi.getContent()));\n                                        // 将请求添加到队列中\n                                        queue.add(multipartRequest);\n\n\n\n//\n//                                        LinkedHashMap<String, String> params = new LinkedHashMap<>();\n//                                        params.put(\"tel\", String.valueOf(etPhoneNumber.getText()));\n//                                        params.put(\"password\", etPasswordNumber.getText().toString());\n//                                        params.put(\"passwordAgain\", etConfirmPasswordNumber.getText().toString());\n//                                        params.put(\"userName\", String.valueOf(etUserName.getText()));\n//                                        params.put(\"verificationCode\", String.valueOf(etVerifyCode.getText()));\n//\n//\n//\n//                                        LinkedHashMap<String, MultipartEntity> params1 = new LinkedHashMap<>();\n//                                        MultipartEntity multipartEntity = new MultipartEntity();\n//                                        multipartEntity.addFilePart(\"images\", new File(file.getPath()));\n//                                        params1.put(\"userAvatar\", multipartEntity);\n//\n//                                        MyHttp.postForm(\"/user/register\", \"\", params, new MyHttp.Callback() {\n//                                            @Override\n//                                            public void success(JSONObject data) throws JSONException {\n//                                                XToastUtils.toast(\"注册成功\");\n//                                                openNewPage(LoginFragment.class);\n//                                            }\n//\n//                                            @Override\n//                                            public void fail(JSONObject error) throws JSONException {\n//                                                if (error.getInt(\"code\") == 40004) {\n//                                                    getVerifyCode();\n//                                                }\n//                                            }\n//                                        });\n                                    }\n                                }else{\n                                    XToastUtils.toast(\"重复密码与原密码不匹配\");\n                                }\n                            }\n                        }\n                    }\n                }else {\n                    XToastUtils.toast(\"请更改头像\");\n                }\n\n                break;\n            case R.id.et_verify_code:\n                KeyboardUtils.isSoftInputShow(getActivity());\n                KeyboardUtils.showSoftInputForce(getActivity());\n                break;\n            case R.id.iv_avatar:\n                showBottomSheetList(ivAvatar);\n                break;\n            default:\n                break;\n        }\n    }\n\n\n    /**\n     * 弹窗\n     * @param v\n     */\n    private void showBottomSheetList(View v) {\n           new BottomListSheetBuilder(getActivity())\n                .addItem(\"拍照\")\n                .addItem(\"从相册选择\")\n                .setOnSheetItemClickListener((dialog, itemView, position, tag) -> {\n                    dialog.dismiss();\n                    switch (position) {\n                        case 0:\n                            // 拍照及文件权限申请\n                            if (ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED\n                                    || ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.WRITE_EXTERNAL_STORAGE)\n                                    != PackageManager.PERMISSION_GRANTED) {\n                                // 权限还没有授予，需要在这里写申请权限的代码\n                                ActivityCompat.requestPermissions(getActivity(),\n                                        new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 300);\n                            } else {\n                                // 权限已经申请，直接拍照\n                                dialog.dismiss();\n                                imageCapture();\n                            }\n\n                            break;\n                        case 1:\n                            // 文件权限申请\n                            if (ContextCompat.checkSelfPermission(getActivity(),\n                                    Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n                                //权限还没有授予，需要在这里写申请权限的代码\n                                ActivityCompat.requestPermissions(getActivity(),\n                                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 200);\n                            } else {\n                                // 如果权限已经申请过，直接进行图片选择\n                                dialog.dismiss();\n                                Intent intent = new Intent(Intent.ACTION_PICK);\n                                intent.setType(\"image/*\");\n                                // 判断系统中是否有处理该 Intent 的 Activity\n                                if (intent.resolveActivity(getActivity().getPackageManager()) != null) {\n                                    startActivityForResult(intent, REQUEST_IMAGE_GET);\n                                }\n                                else {\n                                    Toast.makeText(getActivity(), \"未找到图片查看器\", Toast.LENGTH_SHORT).show();\n                                }\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .build()\n                .show();\n    }\n\n\n\n\n    /**\n     * 处理回调结果\n     */\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        // 回调成功\n        if (resultCode == RESULT_OK) {\n            switch (requestCode) {\n                // 大图切割\n                case REQUEST_BIG_IMAGE_CUTTING:\n                    RadiusImageView radiusImageView = findViewById(R.id.iv_avatar);\n                    GlideImageLoadStrategy lodeImg = new GlideImageLoadStrategy();\n                    lodeImg.loadImage(radiusImageView,mImageUri);\n                    break;\n                // 相册选取\n                case REQUEST_IMAGE_GET:\n                    try {\n                        startBigPhotoZoom(data.getData());\n                    } catch (NullPointerException e) {\n                        e.printStackTrace();\n                    }\n                    break;\n                // 拍照\n                case REQUEST_IMAGE_CAPTURE:\n                    File temp = new File(Environment.getExternalStorageDirectory() + \"/\" + IMAGE_FILE_NAME);\n                    startBigPhotoZoom(temp);\n            }\n        }\n    }\n\n\n\n    /**\n     * 处理权限回调结果\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode) {\n            case 200:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    Intent intent = new Intent(Intent.ACTION_PICK);\n                    intent.setType(\"image/*\");\n                    // 判断系统中是否有处理该 Intent 的 Activity\n                    if (intent.resolveActivity(getActivity().getPackageManager()) != null) {\n                        startActivityForResult(intent, REQUEST_IMAGE_GET);\n                    } else {\n                        XToastUtils.toast(\"未找到图片查看器\");\n                    }\n                } else {\n                }\n                break;\n            case 300:\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                    imageCapture();\n                } else {\n                }\n                break;\n        }\n    }\n\n\n    /**\n     * 判断系统及拍照\n     */\n    private void imageCapture(){\n        Intent intent;\n        Uri pictureUri;\n        File pictureFile = new File(Environment.getExternalStorageDirectory(), IMAGE_FILE_NAME);\n        // 判断当前系统\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n            pictureUri = FileProvider.getUriForFile(getContext(),\n                    \"com.yiflyplan.app.fileProvider\", pictureFile);\n        } else {\n            intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            pictureUri = Uri.fromFile(pictureFile);\n        }\n        // 去拍照\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);\n        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE);\n    }\n\n\n    /**\n     * 大图模式切割图片\n     * 直接创建一个文件将切割后的图片写入\n     */\n    public void startBigPhotoZoom(File inputFile) {\n        // 创建大图文件夹\n        Uri imageUri = null;\n        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            String storage = Environment.getExternalStorageDirectory().getPath();\n            File dirFile = new File(storage + \"/gzIcon\");\n            if (!dirFile.exists()) {\n                if (!dirFile.mkdirs()) {\n                    Log.e(\"TAG\", \"文件夹创建失败\");\n                } else {\n                    Log.e(\"TAG\", \"文件夹创建成功\");\n                }\n            }\n            file = new File(dirFile, System.currentTimeMillis() + \".jpg\");\n            imageUri = Uri.fromFile(file);\n            mImageUri = imageUri; // 将 uri 传出，方便设置到视图中\n        }\n\n        // 开始切割\n        Intent intent = new Intent(\"com.android.camera.action.CROP\");\n        intent.setDataAndType(getImageContentUri(getContext(), inputFile), \"image/*\");\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.putExtra(\"crop\", \"true\");\n        intent.putExtra(\"aspectX\", 1); // 裁剪框比例\n        intent.putExtra(\"aspectY\", 1);\n        intent.putExtra(\"outputX\", 600); // 输出图片大小\n        intent.putExtra(\"outputY\", 600);\n        intent.putExtra(\"scale\", true);\n        intent.putExtra(\"return-data\", false); // 不直接返回数据\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); // 返回一个文件\n        intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString());\n        startActivityForResult(intent, REQUEST_BIG_IMAGE_CUTTING);\n    }\n\n\n\n\n    public void startBigPhotoZoom(Uri uri) {\n        // 创建大图文件夹\n        Uri imageUri = null;\n        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            String storage = Environment.getExternalStorageDirectory().getPath();\n            File dirFile = new File(storage + \"/gzIcon\");\n            if (!dirFile.exists()) {\n                if (!dirFile.mkdirs()) {\n                    Log.e(\"TAG\", \"文件夹创建失败\");\n                } else {\n                    Log.e(\"TAG\", \"文件夹创建成功\");\n                }\n            }\n            file = new File(dirFile, System.currentTimeMillis() + \".jpg\");\n            imageUri = Uri.fromFile(file);\n            mImageUri = imageUri; // 将 uri 传出，方便设置到视图中\n        }\n\n        // 开始切割\n        Intent intent = new Intent(\"com.android.camera.action.CROP\");\n        intent.setDataAndType(uri, \"image/*\");\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n        intent.putExtra(\"crop\", \"true\");\n        intent.putExtra(\"aspectX\", 1); // 裁剪框比例\n        intent.putExtra(\"aspectY\", 1);\n        intent.putExtra(\"outputX\", 600); // 输出图片大小\n        intent.putExtra(\"outputY\", 600);\n        intent.putExtra(\"scale\", true);\n        intent.putExtra(\"return-data\", false); // 不直接返回数据\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri); // 返回一个文件\n        intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString());\n        startActivityForResult(intent, REQUEST_BIG_IMAGE_CUTTING);\n    }\n\n    public Uri getImageContentUri(Context context, File imageFile) {\n        String filePath = imageFile.getAbsolutePath();\n        Cursor cursor = context.getContentResolver().query(\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                new String[] { MediaStore.Images.Media._ID },\n                MediaStore.Images.Media.DATA + \"=? \",\n                new String[] { filePath }, null);\n\n        if (cursor != null && cursor.moveToFirst()) {\n            int id = cursor.getInt(cursor\n                    .getColumnIndex(MediaStore.MediaColumns._ID));\n            Uri baseUri = Uri.parse(\"content://media/external/images/media\");\n            return Uri.withAppendedPath(baseUri, \"\" + id);\n        } else {\n            if (imageFile.exists()) {\n                ContentValues values = new ContentValues();\n                values.put(MediaStore.Images.Media.DATA, filePath);\n                return context.getContentResolver().insert(\n                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);\n            } else {\n                return null;\n            }\n        }\n    }\n\n\n\n    /**\n     * 获取验证码\n     */\n    private void getVerifyCode() {\n\n        LinkedHashMap<String, String> params = new LinkedHashMap<>();\n        params.put(\"type\", \"0\");\n        MyHttp.get(\"/captcha/getRegisteredVerificationCode\", \"\", params, new MyHttp.Callback() {\n            @Override\n            public void success(JSONObject data) throws JSONException {\n                savedVerificationCode = data.toString();\n                verificationCodeImage = stringtoBitmap(savedVerificationCode);\n                codeImage.setImageBitmap(verificationCodeImage);\n            }\n            @Override\n            public void fail(JSONObject error) {\n                codeImage.setImageResource(R.drawable.ic_img);\n                Log.e(\"TAG:\", error.toString());\n\n            }\n        });\n\n    }\n\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java	(revision ca863cc7a0726a992abd0e51342da10fd227dbe0)
+++ app/src/main/java/com/yiflyplan/app/fragment/RegisteredFragment.java	(date 1619976126000)
@@ -19,60 +19,44 @@
 
 import android.Manifest;
 import android.annotation.SuppressLint;
-import android.app.Activity;
 import android.content.ContentValues;
 import android.content.Context;
-import android.content.Entity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.util.Log;
-import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.Toast;
 
-import com.android.volley.RequestQueue;
-import com.android.volley.Response;
-import com.android.volley.toolbox.Volley;
 import com.xuexiang.xaop.annotation.SingleClick;
 import com.xuexiang.xpage.annotation.Page;
-import com.xuexiang.xqrcode.XQRCode;
-import com.xuexiang.xqrcode.util.QRCodeAnalyzeUtils;
 import com.xuexiang.xui.utils.KeyboardUtils;
 import com.xuexiang.xui.widget.actionbar.TitleBar;
-import com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet;
 import com.xuexiang.xui.widget.dialog.bottomsheet.BottomSheet.BottomListSheetBuilder;
 import com.xuexiang.xui.widget.edittext.materialedittext.MaterialEditText;
 import com.xuexiang.xui.widget.imageview.RadiusImageView;
 import com.xuexiang.xui.widget.imageview.strategy.impl.GlideImageLoadStrategy;
-import com.xuexiang.xutil.display.ImageUtils;
-import com.xuexiang.xutil.file.FileUtils;
 import com.yiflyplan.app.R;
-import com.yiflyplan.app.adapter.VO.CurrentUserVO;
 import com.yiflyplan.app.core.BaseFragment;
-import com.yiflyplan.app.core.http.MultipartRequest;
+import com.yiflyplan.app.core.http.FormField;
 import com.yiflyplan.app.core.http.MyHttp;
-import com.yiflyplan.app.core.http.entity.MultipartEntity;
-import com.yiflyplan.app.utils.MD5Util;
-import com.yiflyplan.app.utils.ReflectUtil;
 import com.yiflyplan.app.utils.XToastUtils;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.LinkedHashMap;
+import java.util.List;
 
 import androidx.annotation.NonNull;
-import androidx.annotation.RequiresApi;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 import androidx.core.content.FileProvider;
@@ -152,71 +136,55 @@
                             if(etPasswordNumber.validate()){
                                 if(etConfirmPasswordNumber.getText().toString().equals(etPasswordNumber.getText().toString())){
                                     if (etVerifyCode.validate()) {
-                                        RequestQueue queue = Volley.newRequestQueue(getContext());
+                                        List<FormField> formFields = new ArrayList<>();
+
+                                        FormField formField1 = new FormField();
+                                        formField1.setFieldName("password");
+                                        formField1.setFieldValue(etPasswordNumber.getText().toString());
+
+                                        FormField formField2 = new FormField();
+                                        formField2.setFieldName("passwordAgain");
+                                        formField2.setFieldValue(etConfirmPasswordNumber.getText().toString());
+
+                                        FormField formField3 = new FormField();
+                                        formField3.setFieldName("tel");
+                                        formField3.setFieldValue(String.valueOf(etPhoneNumber.getText()));
 
-                                        MultipartRequest multipartRequest = new MultipartRequest(
-                                                "http://118.190.97.125:8080/user/register", new Response.Listener<String>() {
+                                        FormField formField4 = new FormField();
+                                        formField4.setFieldName("userName");
+                                        formField4.setFieldValue(String.valueOf(etUserName.getText()));
+
+                                        FormField formField5 = new FormField();
+                                        formField5.setFieldName("verificationCode");
+                                        formField5.setFieldValue(String.valueOf(etVerifyCode.getText()));
+
+                                        FormField formField6 = new FormField();
+                                        formField6.setFieldName("userAvatar");
+                                        formField6.setExtras(new FormField.Pair("filename",file.getName()));
+                                        formField6.setContentType("application/x-jpg");
+                                        formField6.setFieldValue(file);
+
+                                        formFields.add(formField1);
+                                        formFields.add(formField2);
+                                        formFields.add(formField3);
+                                        formFields.add(formField4);
+                                        formFields.add(formField5);
+                                        formFields.add(formField6);
+
+                                        MyHttp.postForm("/user/register", "", formFields, new MyHttp.Callback() {
+                                            @Override
+                                            public void success(JSONObject data) throws JSONException {
+                                                XToastUtils.toast("注册成功");
+                                                openNewPage(LoginFragment.class);
+                                            }
 
                                             @Override
-                                            public void onResponse(String response) {
-                                                Log.e("", "### response : " + response);
+                                            public void fail(JSONObject error) throws JSONException {
+                                                if (error.getInt("code") == 40004) {
+                                                    getVerifyCode();
+                                                }
                                             }
-
                                         });
-
-                                        // 添加header
-//                                        multipartRequest.addHeader("Charset", "UTF-8");
-//                                        multipartRequest.addHeader("Content-Type", "multipart/form-data");
-//                                        multipartRequest.addHeader("Accept-Encoding", "gzip,deflate");
-//                                        multipartRequest.addHeader("Authorization", "");
-
-                                        // 通过MultipartEntity来设置参数
-                                        MultipartEntity multi = multipartRequest.getMultiPartEntity();
-
-                                        // 文本参数
-                                        multi.addStringPart("password", etPasswordNumber.getText().toString());
-                                        multi.addStringPart("passwordAgain", etConfirmPasswordNumber.getText().toString());
-                                        multi.addStringPart("tel", String.valueOf(etPhoneNumber.getText()));
-                                        multi.addStringPart("userName",String.valueOf(etUserName.getText()));
-                                        multi.addStringPart("verificationCode", String.valueOf(etVerifyCode.getText()));
-                                        // 上传文件
-                                        multi.addFilePart("userAvatar", file);
-
-                                        Log.d("rrr", String.valueOf(multi.getContent()));
-                                        // 将请求添加到队列中
-                                        queue.add(multipartRequest);
-
-
-
-//
-//                                        LinkedHashMap<String, String> params = new LinkedHashMap<>();
-//                                        params.put("tel", String.valueOf(etPhoneNumber.getText()));
-//                                        params.put("password", etPasswordNumber.getText().toString());
-//                                        params.put("passwordAgain", etConfirmPasswordNumber.getText().toString());
-//                                        params.put("userName", String.valueOf(etUserName.getText()));
-//                                        params.put("verificationCode", String.valueOf(etVerifyCode.getText()));
-//
-//
-//
-//                                        LinkedHashMap<String, MultipartEntity> params1 = new LinkedHashMap<>();
-//                                        MultipartEntity multipartEntity = new MultipartEntity();
-//                                        multipartEntity.addFilePart("images", new File(file.getPath()));
-//                                        params1.put("userAvatar", multipartEntity);
-//
-//                                        MyHttp.postForm("/user/register", "", params, new MyHttp.Callback() {
-//                                            @Override
-//                                            public void success(JSONObject data) throws JSONException {
-//                                                XToastUtils.toast("注册成功");
-//                                                openNewPage(LoginFragment.class);
-//                                            }
-//
-//                                            @Override
-//                                            public void fail(JSONObject error) throws JSONException {
-//                                                if (error.getInt("code") == 40004) {
-//                                                    getVerifyCode();
-//                                                }
-//                                            }
-//                                        });
                                     }
                                 }else{
                                     XToastUtils.toast("重复密码与原密码不匹配");
@@ -397,7 +365,7 @@
         Uri imageUri = null;
         if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
             String storage = Environment.getExternalStorageDirectory().getPath();
-            File dirFile = new File(storage + "/gzIcon");
+            File dirFile = new File(storage + "/bigIcon");
             if (!dirFile.exists()) {
                 if (!dirFile.mkdirs()) {
                     Log.e("TAG", "文件夹创建失败");
@@ -434,7 +402,7 @@
         Uri imageUri = null;
         if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
             String storage = Environment.getExternalStorageDirectory().getPath();
-            File dirFile = new File(storage + "/gzIcon");
+            File dirFile = new File(storage + "/bigIcon");
             if (!dirFile.exists()) {
                 if (!dirFile.mkdirs()) {
                     Log.e("TAG", "文件夹创建失败");
